# -*- coding: utf-8 -*-
"""Submission_CBF.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1pcA5Bo9IVgsv3seYK4rGUs15ycMoEobu

# **Import Library**

Kode di bawah terdiri dari serangkaian pernyataan import yang membawa library dan modul spesifik untuk manipulasi data, visualisasi, dan machine learning. Dokumentasi :

- import pandas as pd = Mengimpor pustaka pandas untuk manipulasi data dengan alias pd

- pd.set_option('display.max_columns', None) = Mengatur pandas untuk menampilkan semua kolom DataFrame

- import numpy as np = Mengimpor pustaka numpy untuk operasi numerik dengan alias np

- from collections import Counter = Mengimpor Counter untuk menghitung frekuensi elemen

- import ast = Mengimpor pustaka ast untuk memproses string literal Python

- import matplotlib.pyplot as plt = Mengimpor modul matplotlib untuk visualisasi dasar dengan alias plt

- import seaborn as sns = Mengimpor pustaka seaborn untuk visualisasi statistik dengan alias sns

- from sklearn.feature_extraction.text import TfidfVectorizer = Mengimpor TfidfVectorizer untuk ekstraksi fitur teks berbasis TF-IDF

- from sklearn.metrics.pairwise import cosine_similarity = Mengimpor cosine_similarity untuk menghitung kemiripan antar dokumen atau vektor teks
"""

import pandas as pd
pd.set_option('display.max_columns', None)
import numpy as np
from collections import Counter
import ast
import matplotlib.pyplot as plt
import seaborn as sns

from sklearn.feature_extraction.text import TfidfVectorizer
from sklearn.metrics.pairwise import cosine_similarity

"""# **Upload Data dari Kaggle**

Kode pada bagian ini adalah serangkaian perintah yang digunakan di lingkungan Google Colab untuk mengunggah file kredensial Kaggle, mengunduh dataset dari Kaggle, mengekstrak file dataset, dan memuat serta menampilkan informasi dasar tentang dataset tersebut.

- from google.colab import files = Mengimpor modul files dari Google Colab untuk mengunggah file dari perangkat lokal

- files.upload() = Membuka dialog untuk mengunggah file, seperti kaggle.json untuk autentikasi Kaggle
"""

from google.colab import files
files.upload()

"""- mkdir -p ~/.kaggle = Membuat direktori .kaggle di sistem jika belum ada

- !cp kaggle.json ~/.kaggle/ = Menyalin file kaggle.json ke direktori .kaggle untuk autentikasi

- !chmod 600 ~/.kaggle/kaggle.json = Mengatur izin file kaggle.json agar hanya dapat diakses pemilik untuk keamanan
"""

!mkdir -p ~/.kaggle
!cp kaggle.json ~/.kaggle/
!chmod 600 ~/.kaggle/kaggle.json

"""- !kaggle datasets download -d marlesson/myanimelist-dataset-animes-profiles-reviews = Mengunduh dataset Anime Dataset with Reviews - MyAnimeList dari Kaggle"""

!kaggle datasets download -d marlesson/myanimelist-dataset-animes-profiles-reviews

"""- !unzip -q myanimelist-dataset-animes-profiles-reviews.zip -d myanimelist = Mengekstrak file zip dataset ke direktori myanimelist secara senyap"""

!unzip -q myanimelist-dataset-animes-profiles-reviews.zip -d myanimelist

"""- df = pd.read_csv('/content/myanimelist/animes.csv') = Memuat file CSV dari dataset ke dalam DataFrame Pandas bernama df"""

df = pd.read_csv('/content/myanimelist/animes.csv')

"""# **Data Understanding**

Menampilkan informasi struktur DataFrame seperti jumlah baris, kolom, tipe data, dan nilai yang hilang
"""

df.info()

"""Menampilkan DataFrame"""

df

"""Kode ini mem-parsing string genre dari DataFrame menggunakan ast.literal_eval dan meratakan daftar genre menjadi satu daftar. Kemudian, menghitung frekuensi setiap genre dengan Counter dan mencetak 10 genre paling umum."""

import ast
from collections import Counter

def parse_genre(genre_str):
    try:
        genres = ast.literal_eval(genre_str)
        if isinstance(genres, list):
            return [g.strip() for g in genres]
        else:
            return []
    except:
        return []

genre_lists = df['genre'].dropna().apply(parse_genre)

flat_genres = [genre for sublist in genre_lists for genre in sublist]

genre_counts = Counter(flat_genres)

print(genre_counts.most_common(10))

"""Kode ini membuat visualisasi barplot menggunakan Seaborn untuk menampilkan 10 genre anime terpopuler berdasarkan frekuensi dari DataFrame, dengan genre di sumbu y dan jumlah anime di sumbu x."""

genre_series = df['genre'].dropna().apply(parse_genre)
flat_genres = [genre for sublist in genre_series for genre in sublist]

genre_counts = Counter(flat_genres)

# top 10 genre paling umum
top_10 = genre_counts.most_common(10)

genres, counts = zip(*top_10)

plt.figure(figsize=(10,6))
sns.barplot(x=list(counts), y=list(genres), palette='viridis')
plt.title('Top 10 Genre Anime Terpopuler')
plt.xlabel('Jumlah Anime')
plt.ylabel('Genre')
plt.show()

"""Kode ini mencetak ringkasan statistik (seperti rata-rata, standar deviasi, minimum, maksimum, dan kuartil) dari kolom 'score', 'ranked', 'popularity', dan 'episodes' pada DataFrame df menggunakan metode describe()."""

print(df[['score', 'ranked', 'popularity', 'episodes']].describe())

"""# **Data Preparation**

Kode ini memilih kolom 'uid', 'title', dan 'genre' dari DataFrame df dan mengganti nama kolom 'uid' menjadi 'anime_id' secara langsung pada DataFrame. Operasi ini menyederhanakan DataFrame dengan hanya menyimpan kolom yang relevan dan memperbarui nama kolom untuk konsistensi.
"""

# Ambil hanya kolom yang dibutuhkan
df = df[['uid', 'title', 'genre']]
df.rename(columns={'uid': 'anime_id'}, inplace=True)

"""Kode ini menghitung jumlah nilai null di setiap kolom DataFrame df menggunakan metode isnull().sum()."""

df.isnull().sum()

"""Kode ini mengurutkan DataFrame df berdasarkan kolom 'anime_id' secara ascending, lalu mereset indeks DataFrame tanpa menyimpan indeks lama, dan menyimpan hasilnya ke dalam fix_df."""

fix_df = df.sort_values(by='anime_id').reset_index(drop=True)
fix_df

"""Kode ini mendefinisikan fungsi clean_genre yang mem-parsing string genre menggunakan ast.literal_eval, mengambil genre pertama dari daftar jika ada, atau mengembalikan np.nan jika gagal atau daftar kosong, lalu menerapkannya pada kolom 'genre' di DataFrame fix_df."""

def clean_genre(genre_str):
    try:
        genre_list = ast.literal_eval(genre_str)
        if isinstance(genre_list, list) and len(genre_list) > 0:
            return genre_list[0]
        else:
            return np.nan
    except:
        return np.nan

fix_df['genre'] = fix_df['genre'].apply(clean_genre)
fix_df

"""Kode ini menghitung jumlah nilai NaN di setiap kolom DataFrame fix_df menggunakan metode isna().sum()."""

fix_df.isna().sum()

"""Kode ini digunakan untuk menghapus baris yang memiliki nilai kosong (NaN) pada kolom 'genre' dan mengatur ulang indeks dataframe. Perintah fix_df.isna().sum() kemudian digunakan untuk menghitung jumlah nilai kosong di setiap kolom dalam dataframe setelah pembersihan tersebut."""

fix_df = fix_df.dropna(subset=['genre']).reset_index(drop=True)
fix_df.isna().sum()

"""Kode ini digunakan untuk mengganti semua spasi dalam nilai kolom 'genre' dengan garis bawah (_) agar lebih konsisten dan mudah digunakan dalam analisis data."""

fix_df['genre'] = fix_df['genre'].str.replace(' ', '_')

"""Perintah ini digunakan untuk menampilkan daftar nilai unik yang ada dalam kolom 'genre' pada dataframe fix_df. Ini berguna untuk melihat variasi atau kategori yang berbeda dalam kolom tersebut setelah melakukan manipulasi data seperti penggantian spasi dengan garis bawah."""

fix_df.genre.unique()

"""Kode ini digunakan untuk menghitung jumlah baris duplikat dalam dataframe fix_df."""

fix_df.duplicated().sum()

"""Perintah ini digunakan untuk menghapus baris duplikat dalam dataframe fix_df dan kemudian mengatur ulang indeks dataframe agar tetap urut setelah penghapusan duplikat. print(fix_df.shape) akan menampilkan ukuran dataframe setelah penghapusan duplikat, yang terdiri dari jumlah baris dan kolom."""

fix_df = fix_df.drop_duplicates().reset_index(drop=True)
print(fix_df.shape)

"""Kode ini mengubah kolom-kolom 'anime_id', 'title', dan 'genre' dari dataframe fix_df menjadi list Python menggunakan metode .tolist(). Kemudian, print(len(anime_id)), print(len(anime_name)), dan print(len(anime_genre)) digunakan untuk menampilkan panjang (jumlah elemen) dari masing-masing list, yaitu jumlah ID anime, nama anime, dan genre anime dalam dataframe setelah diproses."""

anime_id = fix_df['anime_id'].tolist()

anime_name = fix_df['title'].tolist()

anime_genre = fix_df['genre'].tolist()

print(len(anime_id))
print(len(anime_name))
print(len(anime_genre))

"""Kode ini membuat sebuah DataFrame baru bernama anime_new dengan menggunakan tiga list yang telah dibuat sebelumnya: anime_id, anime_name, dan anime_genre. Setiap list akan menjadi kolom di DataFrame dengan nama kolom 'id', 'anime_title', dan 'anime_genre' masing-masing."""

# Membuat dictionary
anime_new = pd.DataFrame({
    'id': anime_id,
    'anime_title': anime_name,
    'anime_genre': anime_genre
})
anime_new

"""Perintah ini digunakan untuk mengambil 5 baris acak dari DataFrame data (yang dalam hal ini adalah anime_new)."""

data = anime_new
data.sample(5)

"""# **Modeling**

Kode ini menginisialisasi TfidfVectorizer untuk menghitung nilai TF-IDF pada kolom 'anime_genre' dalam DataFrame. Fungsi fit() digunakan untuk memproses dan menghitung IDF dari genre-genre anime yang ada. Setelah itu, get_feature_names_out() mengembalikan daftar kata unik yang ditemukan selama proses tokenisasi, yang mewakili fitur untuk setiap genre anime.
"""

# Inisialisasi TfidfVectorizer
tf = TfidfVectorizer(token_pattern=r"(?u)\b[\w\-]+\b")

# Melakukan perhitungan idf pada data cuisine
tf.fit(data['anime_genre'])

# Mapping array dari fitur index integer ke fitur nama
tf.get_feature_names_out()

"""Perintah ini menghitung dan mengubah kolom 'anime_genre' menjadi matriks TF-IDF. Fungsi fit_transform() tidak hanya menghitung IDF, tetapi juga mengubah teks menjadi representasi vektor numerik berdasarkan nilai TF-IDF. tfidf_matrix.shape kemudian akan menampilkan ukuran matriks hasil transformasi, yaitu jumlah baris (anime) dan jumlah fitur (kata-kata unik) yang teridentifikasi dalam genre."""

tfidf_matrix = tf.fit_transform(data['anime_genre'])
tfidf_matrix.shape

"""Perintah ini mengubah matriks sparse hasil dari fit_transform() menjadi matriks dense (penuh) yang lebih mudah dibaca."""

tfidf_matrix.todense()

"""Kode ini membuat DataFrame yang menampilkan matriks TF-IDF dalam bentuk yang lebih mudah dibaca, dengan anime titles sebagai indeks (baris) dan kata-kata unik dari genre sebagai kolom. Dengan sample(22, axis=1) dan sample(15, axis=0), hanya 22 kolom dan 15 baris yang diambil secara acak untuk ditampilkan, memberikan gambaran sekilas tentang nilai TF-IDF di antara genre dan anime yang berbeda."""

# Membuat dataframe untuk melihat tf-idf matrix
# Kolom diisi dengan genre anime
# Baris diisi dengan judul anime

pd.DataFrame(
    tfidf_matrix.todense(),
    columns=tf.get_feature_names_out(),
    index=data.anime_title
).sample(22, axis=1).sample(15, axis=0)

"""Perintah cosine_sim = cosine_similarity(tfidf_matrix) menghitung kemiripan kosinus antar anime berdasarkan matriks TF-IDF yang telah dihitung sebelumnya."""

cosine_sim = cosine_similarity(tfidf_matrix)
cosine_sim

"""Kode ini membuat DataFrame cosine_sim_df yang menampilkan matriks kemiripan kosinus antar anime, dengan judul anime sebagai indeks dan kolom. cosine_sim_df.shape menunjukkan ukuran matriks, yaitu jumlah anime (baris) dan anime lainnya (kolom) yang terlibat dalam perhitungan kemiripan. Perintah sample(5, axis=1).sample(10, axis=0) akan memilih 5 kolom dan 10 baris secara acak untuk ditampilkan, memberi gambaran sekilas tentang kemiripan antar anime."""

cosine_sim_df = pd.DataFrame(cosine_sim, index=data['anime_title'], columns=data['anime_title'])
print('Shape:', cosine_sim_df.shape)

cosine_sim_df.sample(5, axis=1).sample(10, axis=0)

"""# **Mendapatkan Rekomendasi**

Fungsi anime_recommendations memberikan rekomendasi anime berdasarkan kemiripan genre dengan anime yang diberikan. Fungsi ini mencari k anime teratas yang paling mirip menggunakan matriks kemiripan kosinus, menghapus anime yang dicari, dan mengembalikan informasi tentang anime tersebut beserta genre-nya. Hasilnya adalah daftar anime yang memiliki genre serupa dengan anime input.
"""

def anime_recommendations(judul_anime, similarity_data=cosine_sim_df, items=data[['anime_title', 'anime_genre']], k=5):
    """
    Rekomendasi Resto berdasarkan kemiripan dataframe

    Parameter:
    ---
    judul_anime : tipe data string (str)
                Nama Anime (index kemiripan dataframe)
    similarity_data : tipe data pd.DataFrame (object)
                      Kesamaan dataframe, simetrik, dengan anime sebagai
                      indeks dan kolom
    items : tipe data pd.DataFrame (object)
            Mengandung kedua nama dan fitur lainnya yang digunakan untuk mendefinisikan kemiripan
    k : tipe data integer (int)
        Banyaknya jumlah rekomendasi yang diberikan
    ---


    Pada index ini, kita mengambil k dengan nilai similarity terbesar
    pada index matrix yang diberikan (i).
    """


    # Mengambil data dengan menggunakan argpartition untuk melakukan partisi secara tidak langsung sepanjang sumbu yang diberikan
    # Dataframe diubah menjadi numpy
    # Range(start, stop, step)
    index = similarity_data.loc[:,judul_anime].to_numpy().argpartition(
        range(-1, -k, -1))

    # Mengambil data dengan similarity terbesar dari index yang ada
    closest = similarity_data.columns[index[-1:-(k+2):-1]]

    # Drop judul_anime agar nama resto yang dicari tidak muncul dalam daftar rekomendasi
    closest = closest.drop(judul_anime, errors='ignore')

    return pd.DataFrame(closest).merge(items).head(k)

"""Perintah data[data.anime_title.eq('Cowboy Bebop')] digunakan untuk mencari dan menampilkan baris dalam DataFrame data yang memiliki judul anime "Cowboy Bebop". Fungsi .eq() adalah cara untuk memeriksa apakah nilai dalam kolom 'anime_title' sama dengan "Cowboy Bebop", dan hasilnya adalah baris yang sesuai dengan kriteria tersebut."""

data[data.anime_title.eq('Cowboy Bebop')]

"""Kode ini pertama-tama mengambil genre dari anime yang diberikan ('Cowboy Bebop') dengan mencari nilai genre pada DataFrame fix_df, dan kemudian menyimpan genre tersebut dalam variabel input_genre. Setelah itu, fungsi anime_recommendations digunakan untuk mencari 10 anime yang paling mirip berdasarkan genre dari anime yang diberikan, dengan k=10 menunjukkan jumlah rekomendasi yang ingin dihasilkan."""

input_anime = 'Cowboy Bebop'
input_genre = fix_df[fix_df['title'] == input_anime]['genre'].values[0]

recommendations = anime_recommendations(input_anime, k=10)
recommendations

"""# **Evaluasi**

Kode ini menghitung precision untuk rekomendasi anime dengan membandingkan jumlah anime yang relevan (memiliki genre yang sama dengan "Cowboy Bebop") terhadap total jumlah rekomendasi. Precision yang lebih tinggi menunjukkan kualitas rekomendasi yang lebih baik, yaitu semakin banyak rekomendasi yang relevan. Hasilnya dicetak dengan dua angka desimal.
"""

genre_cb = data[data['anime_title'] == 'Cowboy Bebop']['anime_genre'].values[0]

relevan = recommendations[recommendations['anime_genre'] == genre_cb]

# Hitung precision
precision = len(relevan) / len(recommendations)

print("Precision:", round(precision, 2))